import { type GenerateKeyPairOptions, type GenerateKeyPairResult, type KeyLike } from 'jose';
import { Jwk, JwtHeader, JwtPayload, Key, SignedJwt, VerifyOptions, VerifyResult } from '@atproto/jwk';
export type Importable = string | KeyLike | Jwk;
export type { GenerateKeyPairOptions, GenerateKeyPairResult };
export declare class JoseKey<J extends Jwk = Jwk> extends Key<J> {
    /**
     * Some runtimes (e.g. Bun) require an `alg` second argument to be set when
     * invoking `importJWK`. In order to be compatible with these runtimes, we
     * provide the following method to ensure the `alg` is always set. We also
     * take the opportunity to ensure that the `alg` is compatible with this key.
     */
    protected getKeyObj(alg: string): Promise<KeyLike | Uint8Array>;
    createJwt(header: JwtHeader, payload: JwtPayload): Promise<SignedJwt>;
    verifyJwt<C extends string = never>(token: SignedJwt, options?: VerifyOptions<C>): Promise<VerifyResult<C>>;
    static generateKeyPair(allowedAlgos?: readonly string[], options?: GenerateKeyPairOptions): Promise<GenerateKeyPairResult<KeyLike>>;
    static generate(allowedAlgos?: string[], kid?: string, options?: Omit<GenerateKeyPairOptions, 'extractable'>): Promise<JoseKey<{
        kty: string;
        alg?: string | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
    } | {
        kty: "RSA";
        n: string;
        e: string;
        alg?: "RS256" | "RS384" | "RS512" | "PS256" | "PS384" | "PS512" | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
        d?: string | undefined;
        p?: string | undefined;
        q?: string | undefined;
        dp?: string | undefined;
        dq?: string | undefined;
        qi?: string | undefined;
        oth?: [{
            d?: string | undefined;
            r?: string | undefined;
            t?: string | undefined;
        }, ...{
            d?: string | undefined;
            r?: string | undefined;
            t?: string | undefined;
        }[]] | undefined;
    } | {
        kty: "EC";
        crv: "P-256" | "P-384" | "P-521";
        x: string;
        y: string;
        alg?: "ES256" | "ES384" | "ES512" | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
        d?: string | undefined;
    } | {
        kty: "EC";
        crv: "secp256k1";
        x: string;
        y: string;
        alg?: "ES256K" | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
        d?: string | undefined;
    } | {
        kty: "OKP";
        crv: "Ed25519" | "Ed448";
        x: string;
        alg?: "EdDSA" | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
        d?: string | undefined;
    } | {
        kty: "oct";
        k: string;
        alg?: "HS256" | "HS384" | "HS512" | undefined;
        kid?: string | undefined;
        ext?: boolean | undefined;
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        x5u?: string | undefined;
    }>>;
    static fromImportable(input: Importable, kid?: string): Promise<JoseKey>;
    /**
     * @see {@link exportJWK}
     */
    static fromKeyLike(keyLike: KeyLike | Uint8Array, kid?: string, alg?: string): Promise<JoseKey>;
    /**
     * @see {@link importPKCS8}
     */
    static fromPKCS8(pem: string, alg: string, kid?: string): Promise<JoseKey>;
    static fromJWK(input: string | Record<string, unknown>, inputKid?: string): Promise<JoseKey>;
}
//# sourceMappingURL=jose-key.d.ts.map