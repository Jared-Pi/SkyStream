import { OAuthClient, OAuthClientFetchMetadataOptions, OAuthClientOptions, RuntimeLock } from '@atproto/oauth-client';
import { OAuthResponseMode } from '@atproto/oauth-types';
import { AtprotoHandleResolverNodeOptions } from '@atproto-labs/handle-resolver-node';
import { NodeSavedSessionStore, NodeSavedStateStore } from './node-dpop-store.js';
export type * from './node-dpop-store.js';
export type { OAuthClientOptions, OAuthResponseMode, RuntimeLock };
export type NodeOAuthClientOptions = Omit<OAuthClientOptions, 'responseMode' | 'stateStore' | 'sessionStore' | 'runtimeImplementation' | 'handleResolver'> & {
    responseMode?: Exclude<OAuthResponseMode, 'fragment'>;
    stateStore: NodeSavedStateStore;
    sessionStore: NodeSavedSessionStore;
    fallbackNameservers?: AtprotoHandleResolverNodeOptions['fallbackNameservers'];
    requestLock?: RuntimeLock;
};
export type NodeOAuthClientFromMetadataOptions = OAuthClientFetchMetadataOptions & Omit<NodeOAuthClientOptions, 'clientMetadata'>;
export declare class NodeOAuthClient extends OAuthClient {
    static fromClientId(options: NodeOAuthClientFromMetadataOptions): Promise<NodeOAuthClient>;
    constructor({ fetch, responseMode, fallbackNameservers, stateStore, sessionStore, requestLock, ...options }: NodeOAuthClientOptions);
}
//# sourceMappingURL=node-oauth-client.d.ts.map